#!/usr/bin/env python3
# -*- coding: utf-8 -*- 

import os 
import tornado.httpserver
import tornado.ioloop
import tornado.web
import tornado.websocket
import tornado.concurrent
import concurrent.futures
from configparser import ConfigParser
import time
import sys
import alsaaudio
import threading
import gc
import datetime
from sa818 import *
from collections import namedtuple
import secrets
import logging
from logging.handlers import RotatingFileHandler

############ Global variables ##################################
UHRRM_CONFIG_FILE = 'UHRRM.conf'
	
config = ConfigParser()
config.read(UHRRM_CONFIG_FILE)
PTTgpio=str(config['OrangePI']['PTTGPIO'])
RXgpio=str(config['OrangePI']['RXGPIO'])

radio_opts_struct = namedtuple("radio_opts_struct","bw frequency offset squelch ctcss dcs level emphasis highpass lowpass close_tail")	
radio_opts = radio_opts_struct(
bw=None,
frequency=None,
offset=None,
squelch=None,
ctcss=None,
dcs=None,
level=None,
emphasis=None,
highpass=None,
lowpass=None,
close_tail=None
)

logger = logging.getLogger('UHRRM')
logger.setLevel(logging.INFO)
format = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(format)
logger.addHandler(ch)
fh = logging.handlers.RotatingFileHandler(config['SERVER']['log_file'], maxBytes=(1000000), backupCount=5)
fh.setFormatter(format)
logger.addHandler(fh)

############ SA818 ##################################
def SA818init():
	global radio, radio_opts, config
	
	radio = SA818(config['SA818']['serial'], config['SA818']['rate'])
	radio.version()
	
	SA818OptioizeConf()
	
	print(f"\n\
	bw={radio_opts.bw} 0=NARROW (12.5KHz), 1=WIDE (25KHx)\n\
	frequency={radio_opts.frequency}\n\
	offset={radio_opts.offset}\n\
	squelch={radio_opts.squelch}\n\
	ctcss={radio_opts.ctcss}\n\
	dcs={radio_opts.dcs}\n\
	level={radio_opts.level}\n\
	emphasis={radio_opts.emphasis}\n\
	highpass={radio_opts.highpass}\n\
	lowpass={radio_opts.lowpass}\n\
	\n\ ")

	
	radio.set_radio(radio_opts)
	radio.set_filter(radio_opts)
	radio.set_volume(radio_opts)

def SA818OptioizeConf():
	global radio_opts, config
	
	radio_opts = radio_opts_struct(
	bw=int(config['SA818']['bw']),
	frequency=type_frequency(config['SA818']['frequency']),
	offset=float(config['SA818']['offset']),
	squelch=type_squelch(config['SA818']['squelch']),
	ctcss=None if config['SA818']['ctcss'] in ["0", "None"] else type_ctcss(str(config['SA818']['ctcss'])),
	dcs=None if config['SA818']['dcs'] in ["0", "None"] else type_dcs(str(config['SA818']['dcs'])),
	level=type_level(config['SA818']['level']),
	emphasis=yesno(config['SA818']['emphasis']),
	highpass=yesno(config['SA818']['highpass']),
	lowpass=yesno(config['SA818']['lowpass']),
	close_tail=None
	)

def SA818Conf(field, setting):
	global radio, radio_opts
	if field in radio_opts._fields:
		config['SA818'][field]=setting
		SA818OptioizeConf()
		if field in ['bw', 'frequency', 'offset', 'squelch', 'ctcss', 'dcs']:
			radio.set_radio(radio_opts)
		elif field in ['emphasis', 'highpass', 'lowpass']:
			radio.set_filter(radio_opts)	
	with open(UHRRM_CONFIG_FILE, 'w') as configfile:
		config.write(configfile)
		
def SA818savescanFreqs(freqs):
	config['SA818']['scan_frequencies']=""
	for freq in freqs.split(','):
		freq = freq.strip()
		if freq:
			config['SA818']['scan_frequencies'] += "{:.4f}".format(type_frequency(freq))+","
	config['SA818']['scan_frequencies'] = config['SA818']['scan_frequencies'][:-1]
	with open(UHRRM_CONFIG_FILE, 'w') as configfile:
		config.write(configfile)
		

############ GPIO ##################################
def PTTinit():
	global PTTgpio
	os.system(f"echo {PTTgpio} > /sys/class/gpio/export > /dev/null 2>&1")
	os.system(f"echo out > /sys/class/gpio/gpio{PTTgpio}/direction > /dev/null 2>&1")
	os.system(f"echo {RXgpio} > /sys/class/gpio/export > /dev/null 2>&1")
	os.system(f"echo in > /sys/class/gpio/gpio{RXgpio}/direction > /dev/null 2>&1")
	
def PTTset(state=None):
	global PTTgpio
	if state is not None:
		print(f'PTT:{state}')
		state = "1" if state.lower() == "true" else "0"
		os.system(f"echo {state} > /sys/class/gpio/gpio{PTTgpio}/value")
	return os.popen(f"cat /sys/class/gpio/gpio{PTTgpio}/value").read()

############ websocket for control TRX ##############
ControlTRXHandlerClients = []
LastPing = time.time()
WSGlobKey_random_string = None

class WS_ControlTRX(tornado.websocket.WebSocketHandler):
	executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)
	ControlTRX_connected_clients = set()
	
	@tornado.concurrent.run_on_executor
	def SA818Conf_setup(self, field, setting):
		SA818Conf(field, setting)
		pass
	
	def SA818SF(self, freq):
		radio.scan_freq(float(freq))
		status = int(os.popen("cat /sys/class/gpio/gpio"+RXgpio+"/value").read())
		print(f"WS_ControlTRX scan freq: {freq} Status:{status}")
		if status:
			return freq
		else:
			return 0
		pass

	def open(self):
		global WSGlobKey_random_string
		if not WSGlobKey_random_string:
			WSGlobKey_random_string = self.get_argument("keykey")
		if  WSGlobKey_random_string != self.get_argument("keykey"):
			self.close()
			print('WS_ControlTRX Bad WSGlobKey')
			return
		self.set_nodelay(True)
		if(config['SERVER']['yournameserver']!=""):
			self.write_message("ENT:"+config['SERVER']['yournameserver'])
		self.ControlTRX_connected_clients.add(self)
		print('new connection on ControlTRX socket.')
		
	@tornado.gen.coroutine
	def on_message(self, data) :
		global LastPing, radio_opts
		if not self.ws_connection:
			return
		print(f"WS_ControlTRX: {data}")
		
		try:
			(action, datato) = data.split(':')
		except ValueError:
			action = data
			pass
			
		if(action == "PING"):
			yield self.write_message("PONG")
		elif(action == "setPTT"):
			yield self.write_message("getPTT:"+str(PTTset(datato)))
		elif(action == "scanFREQ"):
			try:
				rep = self.SA818SF("{:.4f}".format(type_frequency(datato)))
				yield self.write_message("scanFREQ:"+str(rep)) 
			except:
				pass
		elif(action == "getCONFIG"):
			result_string = ",".join([f"{field}={value}" for field, value in radio_opts._asdict().items()])
			yield self.write_message("getCONFIG:"+str(result_string)) 
			yield print(f"WS_ControlTRX send getCONFIG:{result_string}")
			yield self.write_message("getscanFREQS:"+str(config['SA818']['scan_frequencies'])) 
			yield print(f"WS_ControlTRX send getscanFREQS:{config['SA818']['scan_frequencies']}")
		elif(action == "setCONFIG"):
			(field, setting) = datato.split('=')
			yield self.SA818Conf_setup(field, setting)
			yield self.write_message("setCONFIG:OK")
		elif(action == "setscanFREQS"):
			yield SA818savescanFreqs(datato)
			yield self.write_message("setscanFREQS:OK")
			
			
		LastPing = time.time();
			
	def on_close(self):
		print('WS_ControlTRX connection closed')
		if self in self.ControlTRX_connected_clients:
			self.ControlTRX_connected_clients.remove(self)
		gc.collect()
		
############ websocket for send RX audio from TRX ##############
flagWavstart = False
Wavframes = []
class loadWavdata(threading.Thread):

	def __init__(self):
		global flagWavstart
		threading.Thread.__init__(self)
		self.inp = alsaaudio.PCM(alsaaudio.PCM_CAPTURE, alsaaudio.PCM_NORMAL, channels=1, rate=8000, format=alsaaudio.PCM_FORMAT_FLOAT_LE, periodsize=256, device=config['AUDIO']['inputdevice'])
		print('recording...')

	def run(self):
		global flagWavstart, AudioRXHandlerClients 
		ret=b''
		while True:
			while not flagWavstart:
				time.sleep(0.5)
			l, ret = self.inp.read()
			if l > 0:
				Wavframes.append(ret)
			else:
				print("overrun")
				time.sleep(0.01)
				

class WS_AudioRXHandler(tornado.websocket.WebSocketHandler):
	AudioRXHandler_connected_clients = set()

	def open(self):
		global flagWavstart, WSGlobKey_random_string
		if not WSGlobKey_random_string:
			WSGlobKey_random_string = self.get_argument("keykey")
		if  WSGlobKey_random_string != self.get_argument("keykey"):
			self.close()
			print('WS_AudioRXHandler Bad WSGlobKey.')
			return
		for client in self.AudioRXHandler_connected_clients:
			try:
				client.close()
			except:
				pass
		self.set_nodelay(True)
		Wavframes = []
		flagWavstart = True
		self.tailstream()
		self.AudioRXHandler_connected_clients.add(self)
		print('WS_AudioRXHandler new connection')
		
	@tornado.gen.coroutine
	def tailstream(self):
		while flagWavstart:
			while len(Wavframes)==0:
				yield tornado.gen.sleep(0.1)
			try:
				yield self.write_message(Wavframes[0],binary=True)
				del Wavframes[0]
			except tornado.websocket.WebSocketClosedError:
				print("WS_AudioRXHandler connection closed. Stopping tailstream.")
				break
			
	def on_close(self):
		global flagWavstart
		print('WS_AudioRXHandler connection closed')
		if self in self.AudioRXHandler_connected_clients:
			Wavframes = []
			flagWavstart = False
			self.AudioRXHandler_connected_clients.remove(self)
		gc.collect()

############ websocket for control TX ##############
class WS_AudioTXHandler(tornado.websocket.WebSocketHandler):
	AudioTXHandler_connected_clients = set()
	last_msg_time = 0
	stop_timeout = None
	inp = None
	
	def stoppttontimeout(self):
		try:
			if time.time() > self.last_msg_time + 10:
				if PTTset():
					PTTset("false")
					print("WS_AudioTXHandler stop ptt on timeout")
			else:
				print("WS_AudioTXHandler test ptt on timeout")
				self.stop_timeout = tornado.ioloop.IOLoop.instance().add_timeout(datetime.timedelta(seconds=2), self.stoppttontimeout)
		except:
			return None
		


	def TX_init(self, msg) :
		try:
			itrate, is_encoded, op_rate, op_frm_dur = [int(i) for i in msg.split(',')]
			self.is_encoded = is_encoded
			self.frame_size = op_frm_dur * op_rate
			device = config['AUDIO']['outputdevice']
			self.inp = alsaaudio.PCM(alsaaudio.PCM_PLAYBACK, alsaaudio.PCM_NONBLOCK, channels=1, rate=itrate, format=alsaaudio.PCM_FORMAT_S16_LE, periodsize=2048, device=device)		
		except:
			print("WS_AudioTXHandler pcm device busy")
	
	def open(self):
		global WSGlobKey_random_string
		if not WSGlobKey_random_string:
			WSGlobKey_random_string = self.get_argument("keykey")
		if  WSGlobKey_random_string != self.get_argument("keykey"):
			self.close()
			print('WS_AudioTXHandler Bad WSGlobKey')
			return
		self.set_nodelay(True)
		self.last_msg_time=time.time()
		self.AudioTXHandler_connected_clients.add(self)
		print('WS_AudioTXHandler new connection')

	def on_message(self, data) :
		if not self.ws_connection:
			return
		self.last_msg_time=time.time()
		if str(data).startswith('m:') :
			self.TX_init(str(data[2:]))
			if(self.stop_timeout == None):
				self.stop_timeout = tornado.ioloop.IOLoop.instance().add_timeout(datetime.timedelta(seconds=2), self.stoppttontimeout)
		elif str(data).startswith('s:') :
			self.inp.close()
			tornado.ioloop.IOLoop.instance().remove_timeout(self.stop_timeout)
			self.stop_timeout = None
		else :
			try:
				self.inp.write(data)
			except Exception as e:
				print(f"Error on PCM : {e}")
			gc.collect()

	def on_close(self):
		print('WS_AudioTXHandler connection closed')
		if self in self.AudioTXHandler_connected_clients:
			if hasattr(self,"inp") and self.inp is not None:
				self.inp.close()
			PTTset("false")
			self.AudioTXHandler_connected_clients.remove(self)	
		gc.collect()

############ Login ##############
class AuthLoginHandler(tornado.web.RequestHandler):

	def get(self):
		if config['SERVER']['auth'] != "true":
			self.redirect("/")
			return
		self.write('<html><body><form action="/login" method="post">'
					'CallSign: <input type="text" name="name"></br>'
					'Password: <input type="password" name="passwd"></br>'
					'<input type="submit" value="Sign in">'
					'</form></body></html>')

	def post(self):
		if self.get_argument("name") != "" and self.get_argument("passwd") != "":
			if self.bind(self.get_argument("name"),self.get_argument("passwd")):
				self.set_secure_cookie("user", self.get_argument("name"))
				self.set_cookie("callsign", self.get_argument("name"), samesite=None, secure=True)
				self.set_cookie("autha", "1", samesite=None, secure=True)
			else:
				logger.error(f'Auth fail: {self.request.remote_ip} {self.get_argument("name")} {self.get_argument("passwd")}')
		self.redirect("/")
		
	def bind(self,user="",password=""):
		retval = False
		if (user!="" and password!=""):
			if (user==config['SERVER']['authlogin'] and password==config['SERVER']['authpassword']):
				retval = True		
		return retval
		
class AuthLogoutHandler(tornado.web.RequestHandler):
	def get(self):
		self.clear_cookie("user")
		self.clear_cookie("autha")
		self.redirect(self.get_argument("next", "/"))

############ Main ##############
class MainHandler(tornado.web.RequestHandler):

	def get(self):
		global WSGlobKey_random_string
		try:
			logger.info(f'Connection from IP: {self.request.remote_ip} {self.request.headers.get("Host", "Unknown Host")}')
			if WSGlobKey_random_string != self.get_cookie("keykey") and (WS_ControlTRX.ControlTRX_connected_clients or WS_AudioRXHandler.AudioRXHandler_connected_clients or WS_AudioTXHandler.AudioTXHandler_connected_clients):
				self.write("Access denied. A connection already exists.")
			else:
				WSGlobKey_random_string = self.get_cookie("keykey")
				if not WSGlobKey_random_string:
					WSGlobKey_random_string = ''.join(secrets.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(20))
					self.set_cookie("keykey", WSGlobKey_random_string, samesite=None, secure=True)
				if config['SERVER']['auth'] == "true":
					print("Tornado current user:"+str(self.current_user))
					if not self.current_user:
						self.redirect("/login")
						return
					self.application.settings.get("compiled_template_cache", False)
					self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')
					self.render("www/index.html")
				else:
					self.application.settings.get("compiled_template_cache", False)
					self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')
					self.render("www/index.html")
					return
		except Exception as e:
					logger.error(f'Error in MainHandler: {str(e)}')
					self.write('An error occurred.')
					
if __name__ == "__main__":

	logger.info("Strating server.")
	try:
		SA818init()
	except (IOError, SystemError) as err:
		print(err)

	try:
		
		PTTinit()
		
		threadloadWavdata = loadWavdata()
		threadloadWavdata.start()
		
		app = tornado.web.Application([
		(r'/login', AuthLoginHandler),
		(r'/WSaudioRX', WS_AudioRXHandler),
		(r'/WSaudioTX', WS_AudioTXHandler),
		(r'/WSCTRX', WS_ControlTRX),
		(r'/', MainHandler),
		(r'/(.*)', tornado.web.StaticFileHandler, { 'path' : './www' })
		],debug=1 if config['SERVER']['debug'] == "true" else 0, websocket_ping_interval=10, cookie_secret=config['SERVER']['cookie_secret']) 
	except:
		e = str(sys.exc_info())
		print(e)
		
	http_server = tornado.httpserver.HTTPServer(app, ssl_options={
	"certfile": os.path.join(config['SERVER']['certfile']),
	"keyfile": os.path.join(config['SERVER']['keyfile']),
	})
	http_server.listen(int(config['SERVER']['port']))
	print('HTTP server started.')
	tornado.ioloop.IOLoop.instance().start()
